# 🔮 Eidosian configuration matrix – structurally perfect, mathematically elegant
#╔══════════════════════════════════════════════════════════════════════╗
#║ 📦 REPO FORGE: Universal Monorepo Structure Generator                ║
#║    Architecture translated into code, chaos engineered into order    ║
#║    Where every line serves purpose and every path leads to mastery   ║
#╚══════════════════════════════════════════════════════════════════════╝

[metadata]
name = repo_forge
# 🛠️ Where repository architecture achieves singularity
description = Eidosian Repo Forge - Universal monorepo structure generator
# 🔥 Not just a generator—an architecture manifestation system
long_description = file: README.md
# 📜 Documentation as code, knowledge as structure
long_description_content_type = text/markdown
# 📊 Standard-conformant, universally interpretable
author = Lloyd Handyside, Eidos
# 👨‍💻 Architects of digital perfection
author_email = ace1928@gmail.com, syntheticeidos@gmail.com
# 📧 Connection points to intelligence nexus
url = https://github.com/Ace1928/repo_forge
# 🌐 Source truth, version controlled
license = MIT
# ⚖️ Freedom with responsibility, power with purpose
license_files = LICENSE
# 📄 Legal framework, clearly defined
classifiers =
    Development Status :: 4 - Beta
    # 📈 Evolving yet stable, growing yet reliable
    Intended Audience :: Developers
    # 👩‍💻 For creators who demand perfection
    License :: OSI Approved :: MIT License
    # 📜 Open source, universal access
    Programming Language :: Python :: 3.8
    # 🐍 Compatibility layer: baseline established
    Programming Language :: Python :: 3.9
    # 🐍➕ Compatibility layer: intermediate capabilities
    Programming Language :: Python :: 3.10
    # 🐍➕➕ Compatibility layer: advanced features
    Programming Language :: Python :: 3.11
    # 🐍➕➕➕ Compatibility layer: modern standards
    Programming Language :: Python :: 3.12
    # 🐍➕➕➕➕ Compatibility layer: cutting edge
    Topic :: Software Development :: Build Tools
    # 🏗️ Category: construction instruments
    Topic :: Software Development :: Libraries :: Python Modules
    # 📦 Category: reusable components
    Topic :: Software Development :: Code Generators
    # 🔄 Category: automated creation systems

#╔══════════════════════════════════════════════════════════════════════╗
#║ ⚙️ OPTIONS: Capability matrix with surgical precision                ║
#║    Every setting calculated for maximum effectiveness                ║
#╚══════════════════════════════════════════════════════════════════════╝

[options]
packages = find:
# 🔍 Dynamic discovery—intelligent component mapping
zip_safe = False
# 🔒 Installation stability prioritized
include_package_data = True
# 📄 Non-code assets integrated
package_dir =
    = .
# 🏠 Root directory established as navigation origin
python_requires = >=3.8
# 🐍 Minimum compatibility threshold defined
install_requires =
    colorama>=0.4.6
    # 🌈 Terminal aesthetics system: information clarity through color
    pyyaml>=6.0
    # 📄 Configuration parsing: structured data translation
    jinja2>=3.0.0
    # 🧩 Template engine: pattern-based content generation

#╔══════════════════════════════════════════════════════════════════════╗
#║ 🧩 ENTRY POINTS: Command interface manifestation layer               ║
#║    Where function transforms into utility                            ║
#╚══════════════════════════════════════════════════════════════════════╝

[options.entry_points]
console_scripts =
    repo-forge = repo_forge.cli:main
    # 🏗️ Primary command interface: direct access to core functionality

#╔══════════════════════════════════════════════════════════════════════╗
#║ 📁 PACKAGE DISCOVERY: Component matrix identification system         ║
#║    Precision targeting of relevant elements                          ║
#╚══════════════════════════════════════════════════════════════════════╝

[options.packages.find]
where = .
# 🔭 Search origin established
exclude =
    tests
    # 🧪 Verification components separated from delivery
    tests.*
    # 🧫 All test hierarchy excluded
    examples
    # 📋 Demonstration assets excluded from core
    build
    # 🏗️ Build artifacts excluded from distribution
    dist
    # 📦 Distribution artifacts recursively excluded
    docs/build
    # 📚 Documentation build artifacts excluded
    *.egg-info
    # 🥚 Metadata caches excluded

#╔══════════════════════════════════════════════════════════════════════╗
#║ 🧰 DEVELOPMENT TOOLS: Engineering instruments for perfect creation   ║
#║    Each tool calibrated for maximum effectiveness                    ║
#╚══════════════════════════════════════════════════════════════════════╝

[options.extras_require]
dev =
    black>=23.7.0
    # 🖤 Code formatting: mathematical precision in style
    isort>=5.12.0
    # 📊 Import organization: structural harmony in dependencies
    flake8>=6.1.0
    # 🔍 Code quality analysis: error detection with precision
    mypy>=1.5.1
    # 🔒 Type verification: compile-time safety assurance
    pytest>=7.4.0
    # ✅ Unit testing: functional verification matrix
    pytest-cov>=4.1.0
    # 📊 Test coverage: verification completeness metrics
    build>=0.10.0
    # 🏗️ Package building: artifact creation system
    twine>=4.0.2
    # 🧶 Package distribution: secure deployment protocol
docs =
    sphinx>=8.2.3
    # 📖 Documentation generator: knowledge structure creation
    furo>=2024.8.6
    # 🎨 Modern documentation theme: aesthetic excellence
    sphinx-rtd-theme>=3.0.2
    # 🎨 Alternative documentation theme: universal recognition
    myst-parser>=4.0.1
    # 🔄 Markdown processor: universal format integration
    sphinxcontrib-plantuml>=0.2.0
    # 📊 UML diagram generation: architectural visualization
    sphinxcontrib-mermaid>=0.1.0
    # 📈 Flow chart creation: process visualization
    sphinx-autoapi>=3.0.0
    # 📚 API documentation: code-driven knowledge extraction
    sphinx-copybutton>=0.5.2
    # 📋 Usability enhancement: seamless code acquisition
    sphinx-autodoc-typehints>=3.1.0
    # 📝 Type documentation: interface contract visualization
    sphinx-autobuild>=2024.10.3
    # 🔄 Live rebuilding: instantaneous feedback loop
    sphinx-design>=0.6.1
    # 🎨 Design components: advanced visual communication
full =
    gitpython>=3.1.40
    # 📂 Git integration: version control interaction
    rich>=13.7.0
    # 🌈 Terminal enhancement: information density optimization
    tqdm>=4.66.1
    # 📊 Progress visualization: temporal awareness system
    click>=8.1.7
    # 🖱️ Command interface: ergonomic interaction layer

#╔══════════════════════════════════════════════════════════════════════╗
#║ 🔧 TOOL CONFIGURATIONS: Precision instruments for perfect execution  ║
#╚══════════════════════════════════════════════════════════════════════╝

[flake8]
max-line-length = 88
# 📏 Line length: optimal information density per line
exclude = .git,__pycache__,build,dist,docs/conf.py,*.egg-info
# 🚫 Excluded paths: non-relevant code locations
extend-ignore = E203,W503
# 🤝 Customized rules: Black compatibility
per-file-ignores = 
    __init__.py:F401,F403
    # Module exports exempted from unused import warnings
    tests/*:S101,S106
    # Test files exempted from assertion and hardcoded password warnings

[mypy]
python_version = 3.8
# 🐍 Type checking baseline: minimum supported version
warn_return_any = True
# ⚠️ Return type verification: explicit type documentation
warn_unused_configs = True
# 🔍 Configuration verification: efficacy confirmation
disallow_untyped_defs = True
# 🔒 Function typing: complete interface documentation
disallow_incomplete_defs = True
# 🧩 Partial typing prohibition: complete or nothing
check_untyped_defs = True
# 🔬 Runtime behavior analysis: thorough verification
disallow_untyped_decorators = True
# 🎁 Decorator typing: complete metadata preservation
no_implicit_optional = True
# ❓ Explicit optionality: intention clarity
strict_optional = True
# ⚡ None handling: comprehensive nullability handling
warn_redundant_casts = True
# 🔄 Efficient typing: redundancy elimination
warn_no_return = True
# 🚫 Return path verification: complete execution paths
warn_unreachable = True
# 🛑 Dead code detection: efficiency optimization

[tool:pytest]
testpaths = tests
# 🧪 Test location: verification component directory
python_files = test_*.py
# 📄 Test file pattern: standardized naming convention
python_classes = Test*
# 📊 Test class pattern: structural identification
python_functions = test_*
# 🔍 Test function pattern: functional identification
addopts = --cov=repo_forge --cov-report=term-missing --cov-report=xml:coverage.xml --no-cov-on-fail
# 📝 Test options: comprehensive coverage analysis
console_output_style = progress
# 📊 Display style: dynamic execution feedback
filterwarnings =
    ignore::DeprecationWarning:distutils.*:
    ignore::DeprecationWarning:pkg_resources.*:
    default::DeprecationWarning
# 🔕 Warning configuration: signal-to-noise optimization
markers =
    integration: tests that require external services
    slow: tests that take longer than 1 second
    structure: tests that verify directory structure creation
    config: tests that verify configuration file generation
    docs: tests that verify documentation generation
# 🏷️ Test categorization: contextual verification domains
